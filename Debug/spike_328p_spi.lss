
spike_328p_spi.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  0000010e  00000182  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000010e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         0000063c  00000000  00000000  00000184  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000c35  00000000  00000000  000007c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      00000011  00000000  00000000  000013f5  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000020  00000000  00000000  00001408  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000000be  00000000  00000000  00001428  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000014  00000000  00000000  000014e6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000058  00000000  00000000  000014fa  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 4d 00 	call	0x9a	; 0x9a <main>
  78:	0c 94 85 00 	jmp	0x10a	; 0x10a <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <SPIMasterInit>:
#ifdef MASTER

//SPI init
void SPIMasterInit(void) {
//set MOSI, SCK and SS as output
	DDRB |= (1 << PB3) | (1 << PB5) | (1 << PB2);
  80:	84 b1       	in	r24, 0x04	; 4
  82:	8c 62       	ori	r24, 0x2C	; 44
  84:	84 b9       	out	0x04, r24	; 4
//set SS to high
	PORTB |= (1 << PB2);
  86:	2a 9a       	sbi	0x05, 2	; 5
//enable master and clock fosc/128
	SPCR = (1 << SPE) | (1 << MSTR) | (1<< SPR1) | (1 << SPR0);
  88:	83 e5       	ldi	r24, 0x53	; 83
  8a:	8c bd       	out	0x2c, r24	; 44
  8c:	08 95       	ret

0000008e <SPIMasterSend>:
}

uint8_t SPIMasterSend(uint8_t data) {
	//send data
	SPDR = data;
  8e:	8e bd       	out	0x2e, r24	; 46

	//wait for transmition complete
	while (!(SPSR & (1 << SPIF)))
  90:	0d b4       	in	r0, 0x2d	; 45
  92:	07 fe       	sbrs	r0, 7
  94:	fd cf       	rjmp	.-6      	; 0x90 <SPIMasterSend+0x2>
	;

	return SPDR;
  96:	8e b5       	in	r24, 0x2e	; 46
}
  98:	08 95       	ret

0000009a <main>:

int main(void) {
	//led
	DDRC |= _BV(PC1) | _BV(PC2);
  9a:	87 b1       	in	r24, 0x07	; 7
  9c:	86 60       	ori	r24, 0x06	; 6
  9e:	87 b9       	out	0x07, r24	; 7

	SPIMasterInit();
  a0:	0e 94 40 00 	call	0x80	; 0x80 <SPIMasterInit>
		result = SPIMasterSend(0xFF);// dummy send to read the data
		result = SPIMasterSend(0xFF);// dummy send to read the data
		PORTB |= (1 << PB2);// SS high

		if (result == 0xEF) {
			PORTC ^= _BV(PC1);
  a4:	c2 e0       	ldi	r28, 0x02	; 2
	SPIMasterInit();

	uint8_t result = 0;
	while (1) {

		PORTB &= ~(1 << PB2);			// SS low
  a6:	2a 98       	cbi	0x05, 2	; 5
		result = SPIMasterSend(0x82);// WRITE frame (register 0x02)
  a8:	82 e8       	ldi	r24, 0x82	; 130
  aa:	0e 94 47 00 	call	0x8e	; 0x8e <SPIMasterSend>
		result = SPIMasterSend(0xAB);// dummy send to read the data
  ae:	8b ea       	ldi	r24, 0xAB	; 171
  b0:	0e 94 47 00 	call	0x8e	; 0x8e <SPIMasterSend>
		result = SPIMasterSend(0xCD);// dummy send to read the data
  b4:	8d ec       	ldi	r24, 0xCD	; 205
  b6:	0e 94 47 00 	call	0x8e	; 0x8e <SPIMasterSend>
		result = SPIMasterSend(0xEF);// dummy send to read the data
  ba:	8f ee       	ldi	r24, 0xEF	; 239
  bc:	0e 94 47 00 	call	0x8e	; 0x8e <SPIMasterSend>
		PORTB |= (1 << PB2);// SS high
  c0:	2a 9a       	sbi	0x05, 2	; 5


		PORTB &= ~(1 << PB2);			// SS low
  c2:	2a 98       	cbi	0x05, 2	; 5
		result = SPIMasterSend(0x01);// READ error_num (register 0x01) and frame[0..2]
  c4:	81 e0       	ldi	r24, 0x01	; 1
  c6:	0e 94 47 00 	call	0x8e	; 0x8e <SPIMasterSend>
		result = SPIMasterSend(0xFF);// dummy send to read the data
  ca:	8f ef       	ldi	r24, 0xFF	; 255
  cc:	0e 94 47 00 	call	0x8e	; 0x8e <SPIMasterSend>
		result = SPIMasterSend(0xFF);// dummy send to read the data
  d0:	8f ef       	ldi	r24, 0xFF	; 255
  d2:	0e 94 47 00 	call	0x8e	; 0x8e <SPIMasterSend>
		result = SPIMasterSend(0xFF);// dummy send to read the data
  d6:	8f ef       	ldi	r24, 0xFF	; 255
  d8:	0e 94 47 00 	call	0x8e	; 0x8e <SPIMasterSend>
		result = SPIMasterSend(0xFF);// dummy send to read the data
  dc:	8f ef       	ldi	r24, 0xFF	; 255
  de:	0e 94 47 00 	call	0x8e	; 0x8e <SPIMasterSend>
		PORTB |= (1 << PB2);// SS high
  e2:	2a 9a       	sbi	0x05, 2	; 5

		if (result == 0xEF) {
  e4:	8f 3e       	cpi	r24, 0xEF	; 239
  e6:	29 f4       	brne	.+10     	; 0xf2 <main+0x58>
			PORTC ^= _BV(PC1);
  e8:	88 b1       	in	r24, 0x08	; 8
  ea:	8c 27       	eor	r24, r28
  ec:	88 b9       	out	0x08, r24	; 8
			PORTC &= ~(_BV(PC2));
  ee:	42 98       	cbi	0x08, 2	; 8
  f0:	02 c0       	rjmp	.+4      	; 0xf6 <main+0x5c>
		} else {
			PORTC &= ~(_BV(PC1));
  f2:	41 98       	cbi	0x08, 1	; 8
			PORTC |= _BV(PC2);
  f4:	42 9a       	sbi	0x08, 2	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  f6:	2f ef       	ldi	r18, 0xFF	; 255
  f8:	84 e3       	ldi	r24, 0x34	; 52
  fa:	9c e0       	ldi	r25, 0x0C	; 12
  fc:	21 50       	subi	r18, 0x01	; 1
  fe:	80 40       	sbci	r24, 0x00	; 0
 100:	90 40       	sbci	r25, 0x00	; 0
 102:	e1 f7       	brne	.-8      	; 0xfc <main+0x62>
 104:	00 c0       	rjmp	.+0      	; 0x106 <main+0x6c>
 106:	00 00       	nop
		}

		_delay_ms(500);
		result = 0;
	}
 108:	ce cf       	rjmp	.-100    	; 0xa6 <main+0xc>

0000010a <_exit>:
 10a:	f8 94       	cli

0000010c <__stop_program>:
 10c:	ff cf       	rjmp	.-2      	; 0x10c <__stop_program>
