
spike_328p_spi.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  000001d8  0000026c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001d8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001b  00800106  00800106  00000272  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00000274  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000d11  00000000  00000000  00000940  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00001651  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000060  00000000  00000000  00001668  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000023a  00000000  00000000  000016c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000003c  00000000  00000000  00001902  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000117  00000000  00000000  0000193e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 67 00 	jmp	0xce	; 0xce <__vector_3>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__vector_17>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 ed       	ldi	r30, 0xD8	; 216
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 30       	cpi	r26, 0x06	; 6
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a6 e0       	ldi	r26, 0x06	; 6
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a1 32       	cpi	r26, 0x21	; 33
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 ce 00 	call	0x19c	; 0x19c <main>
  9e:	0c 94 ea 00 	jmp	0x1d4	; 0x1d4 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <SPISlaveInit>:

void * registry_index[] = { &registry.status, &registry.error_num, &registry.frame[0] };

void SPISlaveInit(void) {
	//set MISO as output
	DDRB |= (1 << PB4);
  a6:	24 9a       	sbi	0x04, 4	; 4

	// int for SS for spi_active flag
	PCICR |= (1 << PCIE0);
  a8:	e8 e6       	ldi	r30, 0x68	; 104
  aa:	f0 e0       	ldi	r31, 0x00	; 0
  ac:	80 81       	ld	r24, Z
  ae:	81 60       	ori	r24, 0x01	; 1
  b0:	80 83       	st	Z, r24
	PCMSK0 |= (1 << PCINT2);
  b2:	eb e6       	ldi	r30, 0x6B	; 107
  b4:	f0 e0       	ldi	r31, 0x00	; 0
  b6:	80 81       	ld	r24, Z
  b8:	84 60       	ori	r24, 0x04	; 4
  ba:	80 83       	st	Z, r24

	// initial data/control vars
	spi_state = SPI_STATE_IDLE;
  bc:	84 e0       	ldi	r24, 0x04	; 4
  be:	80 93 1d 01 	sts	0x011D, r24
	spi_sof = SPI_SOF_FALSE;
  c2:	10 92 1e 01 	sts	0x011E, r1
	SPDR = 0x00;
  c6:	1e bc       	out	0x2e, r1	; 46

	//enable SPI and enable SPI interrupt
	SPCR = (1 << SPE) | (1 << SPIE);
  c8:	80 ec       	ldi	r24, 0xC0	; 192
  ca:	8c bd       	out	0x2c, r24	; 44
  cc:	08 95       	ret

000000ce <__vector_3>:
}

ISR(PCINT0_vect) {
  ce:	1f 92       	push	r1
  d0:	0f 92       	push	r0
  d2:	0f b6       	in	r0, 0x3f	; 63
  d4:	0f 92       	push	r0
  d6:	11 24       	eor	r1, r1
  d8:	8f 93       	push	r24
	// DEFINITELY TRIGGERING ~5us AFTER SS TRANISITION (before STC_vect)

	spi_state = (PINB & SPI_SS_PIN_MASK);
  da:	83 b1       	in	r24, 0x03	; 3
  dc:	84 70       	andi	r24, 0x04	; 4
  de:	80 93 1d 01 	sts	0x011D, r24
	if (spi_state == SPI_STATE_ACTIVE) {
  e2:	80 91 1d 01 	lds	r24, 0x011D
  e6:	81 11       	cpse	r24, r1
  e8:	03 c0       	rjmp	.+6      	; 0xf0 <__vector_3+0x22>
		spi_sof = SPI_SOF_TRUE;
  ea:	8f ef       	ldi	r24, 0xFF	; 255
  ec:	80 93 1e 01 	sts	0x011E, r24
	}
}
  f0:	8f 91       	pop	r24
  f2:	0f 90       	pop	r0
  f4:	0f be       	out	0x3f, r0	; 63
  f6:	0f 90       	pop	r0
  f8:	1f 90       	pop	r1
  fa:	18 95       	reti

000000fc <__vector_17>:

ISR(SPI_STC_vect) {
  fc:	1f 92       	push	r1
  fe:	0f 92       	push	r0
 100:	0f b6       	in	r0, 0x3f	; 63
 102:	0f 92       	push	r0
 104:	11 24       	eor	r1, r1
 106:	2f 93       	push	r18
 108:	8f 93       	push	r24
 10a:	9f 93       	push	r25
 10c:	ef 93       	push	r30
 10e:	ff 93       	push	r31
	// DEFINITELY TRIGGERING AFTER EACH BYTE RECEIVED

	uint8_t data = SPDR;
 110:	2e b5       	in	r18, 0x2e	; 46

	if (spi_sof == SPI_SOF_TRUE) {
 112:	80 91 1e 01 	lds	r24, 0x011E
 116:	8f 3f       	cpi	r24, 0xFF	; 255
 118:	a9 f4       	brne	.+42     	; 0x144 <__vector_17+0x48>
		PORTC ^= _BV(PC1);
 11a:	98 b1       	in	r25, 0x08	; 8
 11c:	82 e0       	ldi	r24, 0x02	; 2
 11e:	89 27       	eor	r24, r25
 120:	88 b9       	out	0x08, r24	; 8
		spi_mode = (data & SPI_MODE_MASK);
 122:	82 2f       	mov	r24, r18
 124:	80 78       	andi	r24, 0x80	; 128
 126:	80 93 1c 01 	sts	0x011C, r24
		spi_register = registry_index[data & SPI_REGISTER_MASK];
 12a:	e2 2f       	mov	r30, r18
 12c:	ef 77       	andi	r30, 0x7F	; 127
 12e:	f0 e0       	ldi	r31, 0x00	; 0
 130:	ee 0f       	add	r30, r30
 132:	ff 1f       	adc	r31, r31
 134:	e0 50       	subi	r30, 0x00	; 0
 136:	ff 4f       	sbci	r31, 0xFF	; 255
 138:	80 81       	ld	r24, Z
 13a:	91 81       	ldd	r25, Z+1	; 0x01
 13c:	90 93 20 01 	sts	0x0120, r25
 140:	80 93 1f 01 	sts	0x011F, r24
	}

	if (spi_mode == SPI_MODE_READING) {
 144:	80 91 1c 01 	lds	r24, 0x011C
 148:	81 11       	cpse	r24, r1
 14a:	0d c0       	rjmp	.+26     	; 0x166 <__vector_17+0x6a>
		SPDR = (*(uint8_t*) spi_register++);
 14c:	e0 91 1f 01 	lds	r30, 0x011F
 150:	f0 91 20 01 	lds	r31, 0x0120
 154:	cf 01       	movw	r24, r30
 156:	01 96       	adiw	r24, 0x01	; 1
 158:	90 93 20 01 	sts	0x0120, r25
 15c:	80 93 1f 01 	sts	0x011F, r24
 160:	80 81       	ld	r24, Z
 162:	8e bd       	out	0x2e, r24	; 46
 164:	0f c0       	rjmp	.+30     	; 0x184 <__vector_17+0x88>
	} else if (spi_sof == SPI_SOF_FALSE){
 166:	80 91 1e 01 	lds	r24, 0x011E
 16a:	81 11       	cpse	r24, r1
 16c:	0b c0       	rjmp	.+22     	; 0x184 <__vector_17+0x88>
		*((uint8_t*) spi_register++) = data;
 16e:	e0 91 1f 01 	lds	r30, 0x011F
 172:	f0 91 20 01 	lds	r31, 0x0120
 176:	cf 01       	movw	r24, r30
 178:	01 96       	adiw	r24, 0x01	; 1
 17a:	90 93 20 01 	sts	0x0120, r25
 17e:	80 93 1f 01 	sts	0x011F, r24
 182:	20 83       	st	Z, r18
	}

	spi_sof = SPI_SOF_FALSE;
 184:	10 92 1e 01 	sts	0x011E, r1
}
 188:	ff 91       	pop	r31
 18a:	ef 91       	pop	r30
 18c:	9f 91       	pop	r25
 18e:	8f 91       	pop	r24
 190:	2f 91       	pop	r18
 192:	0f 90       	pop	r0
 194:	0f be       	out	0x3f, r0	; 63
 196:	0f 90       	pop	r0
 198:	1f 90       	pop	r1
 19a:	18 95       	reti

0000019c <main>:
// Monitor SS to set state to idle on transition to HIGH

int main(void) {

	// test data
	registry.status = 0xAB;
 19c:	8b ea       	ldi	r24, 0xAB	; 171
 19e:	80 93 06 01 	sts	0x0106, r24
	registry.error_num = 0x03;
 1a2:	83 e0       	ldi	r24, 0x03	; 3
 1a4:	80 93 07 01 	sts	0x0107, r24
	registry.frame[0] = 0x01;
 1a8:	81 e0       	ldi	r24, 0x01	; 1
 1aa:	80 93 08 01 	sts	0x0108, r24
	registry.frame[1] = 0x12;
 1ae:	82 e1       	ldi	r24, 0x12	; 18
 1b0:	80 93 09 01 	sts	0x0109, r24
	registry.frame[2] = 0x05;
 1b4:	85 e0       	ldi	r24, 0x05	; 5
 1b6:	80 93 0a 01 	sts	0x010A, r24
	registry.frame[3] = 0x07;
 1ba:	87 e0       	ldi	r24, 0x07	; 7
 1bc:	80 93 0b 01 	sts	0x010B, r24
	registry.frame[4] = 0x09;
 1c0:	89 e0       	ldi	r24, 0x09	; 9
 1c2:	80 93 0c 01 	sts	0x010C, r24
	registry.frame[5] = 0x00;
 1c6:	10 92 0d 01 	sts	0x010D, r1

	DDRC |= _BV(PC1);
 1ca:	39 9a       	sbi	0x07, 1	; 7
	//PORTC &= ~(_BV(PC1)); // turn off the pullup

	SPISlaveInit();
 1cc:	0e 94 53 00 	call	0xa6	; 0xa6 <SPISlaveInit>
	sei();
 1d0:	78 94       	sei
 1d2:	ff cf       	rjmp	.-2      	; 0x1d2 <main+0x36>

000001d4 <_exit>:
 1d4:	f8 94       	cli

000001d6 <__stop_program>:
 1d6:	ff cf       	rjmp	.-2      	; 0x1d6 <__stop_program>
